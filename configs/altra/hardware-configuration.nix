# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [ ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "usb_storage"
    "nvme"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  systemd.repart.partitions = {
    "00-esp" = {
      Type = "esp";
      SizeMaxBytes = "1G";
      Format = "vfat";
    };
    "10-root" = {
      Type = "root-arm64";
      Format = "btrfs";
    };
  };

  # Handled by gpt-auto-generator
  # TODO: Can't leave empty because NixOS complains
  fileSystems."/" =
    let
      root = config.systemd.repart.partitions."10-root";
    in
    {
      device = "/dev/disk/by-partlabel/${root.Type}";
      fsType = root.Format;
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = false;
  networking.useNetworkd = lib.mkDefault true;

  systemd.network.networks.bmc = {
    matchConfig.Name = "usb0";
    networkConfig = {
      LinkLocalAddressing = "yes";
      MulticastDNS = "yes";
    };
  };

  systemd.network.networks.eth = {
    # TODO: bonding
    matchConfig.Name = "enP3p3s0f0";
    networkConfig = {
      DHCP = "yes";
      MulticastDNS = "yes";
    };
    ipv6AcceptRAConfig.Token = "static:::dead:beef:cafe:babe";
  };

  systemd.network.networks.wg0 = {
    matchConfig = {
      Name = "wg0";
    };
    address = [ "2a00:5880:1404:103::/64" ];
  };

  systemd.network.netdevs."80-wg0" = {
    netdevConfig = {
      Kind = "wireguard";
      Name = "wg0";
      MTUBytes = "1416";
    };
    wireguardConfig = {
      PrivateKeyFile = "/etc/credstore/wireguard.key";
    };
    wireguardPeers = [
      {
        PublicKey = "0gBdqxLAMvm9sgGP5ujGRFE6rHDko8vl5UnBm2q58y4=";
        Endpoint = "hardin.alternativebit.fr";
        PersistentKeepalive = 15;
        AllowedIPs = "0.0.0.0/0,::/0";
      }
    ];
  };

  systemd.network.links."10-foo" = {
    matchConfig.Driver = "ixgbe";
    linkConfig.Advertise = [
      "100baset-full"
      "1000baset-full"
      "2500baset-full"
      "5000baset-full"
      "10000baset-full"
    ];
    linkConfig.NamePolicy = [
      "keep"
      "kernel"
      "database"
      "onbard"
      "slot"
      "path"
    ];
    linkConfig.AlternativeNamesPolicy = [
      "database"
      "onboard"
      "slot"
      "path"
      "mac"
    ];
    linkConfig.MACAddressPolicy = "persistent";
  };

  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";
}
