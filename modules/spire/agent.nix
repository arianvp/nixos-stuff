{
  lib,
  pkgs,
  config,
  utils,
  ...
}:
{
  options.spire.agent = {
    enable = lib.mkEnableOption "Spire agent";

    allowUnauthenticatedVerifiers = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "If true, the agent permits the retrieval of X509 certificate bundles by unregistered clients";
    };

    config = lib.mkOption {
      type = lib.types.str;
      description = "SPIRE plugin config";
      default = ''
        plugins {
          KeyManager "memory" {
            plugin_data {
            }
          }

          NodeAttestor "join_token" {
            plugin_data { }
          }

          WorkloadAttestor "systemd" {
            plugin_data {
            }
          }

          WorkloadAttestor "unix" {
            plugin_data {
              discover_workload_path = true
            }
          }
        }
      '';
    };

    expandEnv = lib.mkOption {
      type = lib.types.bool;
      default = true;
      description = "Expand environment variables in SPIRE config file";
    };

    insecureBootstrap = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "If true, the agent bootstraps without verifying the server's identity";
    };

    joinToken = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "An optional token which has been generated by the SPIRE server";
    };

    logFile = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "File to write logs to";
    };

    logFormat = lib.mkOption {
      type = lib.types.str;
      default = "text";
      description = "'text' or 'json'";
    };

    logLevel = lib.mkOption {
      type = lib.types.enum [
        "debug"
        "info"
        "warn"
        "error"
      ];
      default = "info";
      description = "Log level";
    };

    logSourceLocation = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Include source file, line number and function name in log lines";
    };

    retryBootstrap = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "If true, the agent retries bootstrap with backoff";
    };

    serverAddress = lib.mkOption {
      type = lib.types.str;
      description = "IP address or DNS name of the SPIRE server";
    };

    serverPort = lib.mkOption {
      type = lib.types.port;
      default = 8081;
      description = "Port number of the SPIRE server";
    };

    socketPath = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = "/tmp/spire-agent/public/api.sock";
      description = "Path to bind the SPIRE Agent API socket to";
    };

    trustBundle = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "Path to the SPIRE server CA bundle";
    };

    trustBundleFormat = lib.mkOption {
      type = lib.types.nullOr (
        lib.types.enum [
          "pem"
          "spiffe"
        ]
      );
      default = null;
      description = "Format of the bootstrap trust bundle, 'pem' or 'spiffe'";
    };

    trustBundleUrl = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = "https://${config.spire.agent.serverAddress}";
      description = "URL to download the SPIRE server CA bundle";
    };

    trustDomain = lib.mkOption {
      type = lib.types.str;
      description = "The trust domain that this agent belongs to";
    };

  };
  config = lib.mkIf config.spire.agent.enable {
    environment.systemPackages = [ pkgs.spire ];
    systemd.services.spire-agent = {
      description = "Spire agent";
      wantedBy = [ "multi-user.target" ];
      serviceConfig = {
        Restart = "always";
        RuntimeDirectory = "spire-agent";
        StateDirectory = "spire-agent";
        ExecStart =
          utils.escapeSystemdExecArgs (
            [
              "${pkgs.spire}/bin/spire-agent"
              "run"
            ]
            ++ lib.cli.toGNUCommandLine { } {
              config = "${pkgs.writeText "agent.conf" config.spire.agent.config}";
              inherit (config.spire.agent)
                allowUnauthenticatedVerifiers
                expandEnv
                insecureBootstrap
                joinToken
                logFile
                logFormat
                logLevel
                logSourceLocation
                retryBootstrap
                serverAddress
                serverPort
                socketPath
                trustBundle
                trustBundleFormat
                trustBundleUrl
                trustDomain
                ;
            }
          )
          + " --dataDir $STATE_DIRECTORY";
      };
    };
  };
}
