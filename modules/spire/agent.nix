{
  lib,
  pkgs,
  config,
  ...
}:
let
  cfg = config.spire.agent;
in
{
  options.spire.agent = {
    enable = lib.mkEnableOption "Spire agent";

    allowUnauthenticatedVerifiers = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "If true, the agent permits the retrieval of X509 certificate bundles by unregistered clients";
    };

    config = lib.mkOption {
      type = lib.types.str;
      description = "SPIRE plugin config";
    };

    expandEnv = lib.mkOption {
      type = lib.types.bool;
      default = true;
      description = "Expand environment variables in SPIRE config file";
    };

    insecureBootstrap = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "If true, the agent bootstraps without verifying the server's identity";
    };

    joinToken = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "An optional token which has been generated by the SPIRE server";
    };

    logFile = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "File to write logs to";
    };

    logFormat = lib.mkOption {
      type = lib.types.str;
      default = "text";
      description = "'text' or 'json'";
    };

    logLevel = lib.mkOption {
      type = lib.types.enum [
        "debug"
        "info"
        "warn"
        "error"
      ];
      default = "info";
      description = "Log level";
    };

    logSourceLocation = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "Include source file, line number and function name in log lines";
    };

    retryBootstrap = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = "If true, the agent retries bootstrap with backoff";
    };

    serverAddress = lib.mkOption {
      type = lib.types.str;
      description = "IP address or DNS name of the SPIRE server";
    };

    serverPort = lib.mkOption {
      type = lib.types.port;
      default = 8081;
      description = "Port number of the SPIRE server";
    };

    trustBundle = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "Path to the SPIRE server CA bundle";
    };

    trustBundleFormat = lib.mkOption {
      type = lib.types.nullOr (
        lib.types.enum [
          "pem"
          "spiffe"
        ]
      );
      default = null;
      description = "Format of the bootstrap trust bundle, 'pem' or 'spiffe'";
    };

    trustBundleUrl = lib.mkOption {
      type = lib.types.nullOr lib.types.str;
      default = null;
      description = "URL to download the SPIRE server CA bundle";
    };

    trustDomain = lib.mkOption {
      type = lib.types.str;
      description = "The trust domain that this agent belongs to";
    };

    socketPath = lib.mkOption {
      type = lib.types.str;
      description = "Path to bind the SPIRE Server API Socket to";
      default = "/run/spire/agent/public/api.sock";
    };

  };
  config = lib.mkIf cfg.enable {
    environment.systemPackages = [ pkgs.spire-agent ];

    # NOTE: For when https://github.com/spiffe/spire/pull/5776 lands
    environment.variables.SPIFFE_ENDPOINT_SOCKET = cfg.socketPath;
    systemd.globalEnvironment.SPIFFE_ENDPOINT_SOCKET = cfg.socketPath;

    systemd.sockets.spire-agent = {
      description = "Spire agent API socket";
      wantedBy = [ "sockets.target" ];
      socketConfig = {
        FileDescriptorName = "spire-agent-workload";
        ListenStream = cfg.socketPath;
      };
    };

    systemd.services.spire-agent = {
      description = "Spire agent";
      serviceConfig = {
        Restart = "always";
        RuntimeDirectory = "spire-agent";
        StateDirectory = "spire-agent";
        StateDirectoryMode = "0700";
        ExecStart =
          "${pkgs.spire.agent}/bin/spire-agent run "
          + lib.cli.toGNUCommandLineShell { } {
            config = "${pkgs.writeText "agent.conf" config.spire.agent.config}";
            dataDir = "$STATE_DIRECTORY";
            inherit (config.spire.agent)
              allowUnauthenticatedVerifiers
              expandEnv
              insecureBootstrap
              joinToken
              logFile
              logFormat
              logLevel
              logSourceLocation
              retryBootstrap
              serverAddress
              serverPort
              trustBundle
              trustBundleFormat
              trustBundleUrl
              trustDomain
              ;
          };

        # NOTE: We must run as root as unix plugin relies on accessing system bus and /proc

        LockPersonality = true;
        MemoryDenyWriteExecute = true;
        NoNewPrivileges = true;

        # TODO: might be needed by tpm plugin
        # PrivateDevices = true;
        DeviceAllow = "/dev/tpmrm0";
        PrivateTmp = true;
        ProtectControlGroups = true;
        ProtectClock = true;
        UMask = "0600";
        ProtectHome = true;
        ProtectHostname = true;
        ProtectKernelLogs = true;
        ProtectKernelModules = true;
        ProtectKernelTunables = true;
        ProtectSystem = "strict";
        RestrictAddressFamilies = "AF_UNIX AF_INET AF_INET6";
        RestrictNamespaces = true;
        RestrictRealtime = true;
        RestrictSUIDSGID = true;
      };
    };
  };
}
